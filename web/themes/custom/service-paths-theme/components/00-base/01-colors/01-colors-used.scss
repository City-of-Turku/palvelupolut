// Color Usage variables - use these (via the `color` function below)
// rather than color variables directly.
$defaultColors: (
  text: $black,
  text-inverse: $white,
  text-dark: $blue,
  text-error: $red-dark,
  border-primary: $blue,
  border-separator: $gray,
  background: $white,
  background-inverse: $black,
  background-section: $beige-light,
  background-section-dark: $beige,
  background-light: $gray-white,
  background-dark: $blue,
  primary: $black,
  accent: $blue,
  status-warning: $yellow-light,
  status-error: $red-light,
  status-message: $green-light,
);

///////////
// Usage //
///////////
// This color function makes it easy for you to call a color by it's functional
// name anywhere you need.
// E.g. to use the `text` color, you type: `color: color(text);`
//
// How it works:
// This function works in conjunction with the dynamic css custom properties
// declarations below. The item called in the function is prefixed with
// `var(--color-` to call the custom property for that color.
// E.g. `color: color(text);` will return `color: var(--color-text);`
// Note: (The `--color-` is added via the `@each` loops below)
@function color($colorChoice) {
  @return var(--color-#{$colorChoice});
}

// Create CSS custom properties
// This is what powers the built-in OS light/dark mode switching.
// For each color variable above (e.g. `text` and `background`) a css custom
// property will be created. (e.g. `--c-text:` and `--c-background:`).
//
// The first `@each` below will create a custom property for each item in the
// `$defaultColors` map. So put all of your default colors there.
//
// The `prefers-color-scheme: dark` media query below will then create custom
// properties for each of the colors in the `$darkColors` map only if the
// browser supports that feature. If there is an exact match (e.g. `text`) in
// both maps, the one from `$darkColors` will be used on machines that have
// opted to use the 'dark mode' on their OS.
:root {
  // Create custom properties for default colors
  @each $name, $color in $defaultColors {
    --color-#{$name}: #{$color};
  }

  // Create custom properties for dark colors, an duse them if the user's OS has dark mode enabled
  // @todo Enable this at some point.
  //@media (prefers-color-scheme: dark) {
  //  @each $name, $color in $darkColors {
  //    --color-#{$name}: #{$color};
  //  }
  //}

  // Use the default color scheme for the "Default Theme" section of the
  // component library regardless of OS setting.
  // This is required to show the correct colors in the component library at all times
  [data-theme='default'] {
    @each $name, $color in $defaultColors {
      --color-#{$name}: #{$color};
    }
  }
}
