<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Url;

/**
 * Custom twig templates for radio and checkbox input labels.
 */
function service_paths_theme_preprocess_form_element(&$variables) {
  if ($variables['element']['#type'] == 'radio') {
    $variables['label']['#theme'] = 'form_element_label__radio';
  }
  elseif ($variables['element']['#type'] == 'checkbox') {
    $variables['label']['#theme'] = 'form_element_label__checkbox';
  }
  elseif ($variables['element']['#type'] == 'select') {
    $variables['label']['#theme'] = 'form_element_label__select';
  }
}

/**
 * Implements hook_preprocess_select().
 */
function service_paths_theme_preprocess_select(&$variables) {
  if (isset($variables['attributes']['name'])) {
    $variables['attributes']['aria-label'] = 'select__' . $variables['attributes']['id'];
  }
}

/**
 * Implements hook_preprocess_links__LINKS().
 *
 * Helper for adding language links in an easy to theme format.
 */
function service_paths_theme_preprocess_links__language_block(&$variables) {
  $current_language = \Drupal::languageManager()->getCurrentLanguage();
  $languages = \Drupal::languageManager()->getLanguages();
  $links = [];

  foreach ($variables['links'] as $langcode => $link) {
    $links[$langcode]['title'] = $languages[$langcode]->getName();

    if (!empty($link['link'])) {
      $links[$langcode]['url'] = service_paths_theme_get_link_url($link['link']['#url'], $link['link']['#options']);

      if ($current_language->getId() === $langcode) {
        $links[$langcode]['modifiers'] = ['is-active'];
        $links[$langcode]['attributes'] = ['aria-current' => 'true'];
      }
    }
  }

  $variables['language_links'] = $links;
  $variables['language_current'] = $current_language->getName();
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function service_paths_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $suggestions = [];
  $element = $variables['element'];

  // $entity_type = $element['#entity_type'];
  $field_type = $element['#field_type'];
  $field_name = $element['#field_name'];
  $view_mode = $element['#view_mode'];
  $bundle = $element['#bundle'];

  $suggestions[] = 'field__' . $field_type;
  $suggestions[] = 'field__' . $field_name;
  $suggestions[] = 'field__' . $field_name . '__' . $view_mode;
  $suggestions[] = 'field__' . $field_name . '__' . $bundle;
  $suggestions[] = 'field__' . $field_name . '__' . $bundle . '__' . $view_mode;

  return $suggestions;
}

/**
 * Custom twig templates for reset input fields.
 */
function service_paths_theme_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (
    $element['#type'] === 'submit' &&
    isset($element['#parents'][0]) &&
    $element['#parents'][0] === 'reset'
  ) {
    $suggestions[] = 'input__reset';
  }
}

/**
 * Implements hook_theme_suggestions_responsive_image_formatter_alter().
 */
function service_paths_theme_theme_suggestions_responsive_image_formatter_alter(&$suggestions, $variables) {
  $suggestions[] = 'responsive_image_formatter__' . $variables['responsive_image_style_id'];
}

/**
 * Implements hook_theme_suggestions_paragraph_alter().
 */
function service_paths_theme_theme_suggestions_paragraph_alter(&$suggestions, $variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $view_mode = $variables['elements']['#view_mode'];
  $parent = $paragraph->getParentEntity();
  if ($parent) {
    $suggestions[] = 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle();
    $suggestions[] = 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle() . '__' . $view_mode;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function service_paths_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view__' . $variables['view']->id();
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function service_paths_theme_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->id();
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

/**
 * Get link url with set language.
 *
 * @param \Drupal\Core\Url $url
 *   The URL object used for the link.
 * @param array $options
 *   The URL options used for the link.
 *
 * @return string
 *   The URL for the link.
 */
function service_paths_theme_get_link_url(Url $url, array $options) {
  $url->setOptions($options);
  return $url->toString();
}
