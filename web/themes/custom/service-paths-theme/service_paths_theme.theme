<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Field\FieldItemList;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;

/**
 * Implements hook_page_attachments_alter().
 */
function service_paths_theme_page_attachments_alter(array &$page) {
  // Add a rendered external link icon for javascript implementations.
  $external_link_icon = [
    '#theme' => 'service_paths_theme_icon',
    '#name' => 'external-link-alt',
    '#decorative' => TRUE,
    '#modifiers' => [
      'external-link',
    ],
  ];

  $page['#attached']['drupalSettings']['servicePathsTheme'] = [
    'iconMarkupExternalLink' => \Drupal::service('renderer')->renderPlain($external_link_icon),
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function service_paths_theme_preprocess_page(array &$variables) {
  /** @var \Drupal\Core\Language\Language $language */
  $language = $variables['language'];
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'] ?? FALSE;

  // Show a message if we're on a node page and node doesn't have
  // a translation for currently active language.
  if ($node instanceof Node && !$node->hasTranslation($language->getId())) {
    $message_text = '';
    switch ($language->getId()) {
      case 'fi':
        $message_text = t('Unfortunately this content is not available in Finnish.');
        break;

      case 'en':
        $message_text = t('Unfortunately this content is not available in English.');
        break;

      case 'sv':
        $message_text = t('Unfortunately this content is not available in Swedish.');
        break;
    }

    $variables['translation_status_message'] = $message_text;
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function service_paths_theme_preprocess_breadcrumb(&$variables) {
  $request_attributes = \Drupal::request()->attributes;
  $node = $request_attributes->get('node');
  $view_mode = $request_attributes->get('view_mode');

  // Add additional breadcrumb item for Service content type view modes that
  // are used to list service channels by type.
  if ($view_mode && $node instanceof Node && $node->bundle() === 'service') {
    $additional_title = '';

    switch ($view_mode) {
      case 'service_channels_location':
        $additional_title = $node->field_services_subtitle_location->value ?? t('All locations');
        break;

      case 'service_channels_e_service':
        $additional_title = $node->field_services_subtitle_e_servic->value ?? t('All E-Services');
        break;

      case 'service_channels_phone':
        $additional_title = $node->field_services_subtitle_phones->value ?? t('All phone numbers');
        break;

      case 'service_channels_print':
        $additional_title = $node->field_services_subtitle_prints->value ?? t('All printable forms');
        break;
    }

    if ($additional_title) {
      $variables['breadcrumb'][] = [
        'text' => $additional_title,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function service_paths_theme_preprocess_node__service__service_channels_location(&$variables) {
  _service_paths_theme_service_channels($variables, 'service_channels_embed_locations');
}

/**
 * Implements hook_preprocess_node().
 */
function service_paths_theme_preprocess_node__service__service_channels_e_service(&$variables) {
  _service_paths_theme_service_channels($variables, 'service_channels_embed_e_services');
}

/**
 * Implements hook_preprocess_node().
 */
function service_paths_theme_preprocess_node__service__service_channels_phone(&$variables) {
  _service_paths_theme_service_channels($variables, 'service_channels_embed_phones');
}

/**
 * Implements hook_preprocess_node().
 */
function service_paths_theme_preprocess_node__service__service_channels_print(&$variables) {
  _service_paths_theme_service_channels($variables, 'service_channels_embed_prints');
}

/**
 * Implements hook_preprocess_node().
 */
function service_paths_theme_preprocess_node__service_channel(&$variables) {
  $node = $variables['node'];
  $map_url = \Drupal::config('ptv.services')->get('map_url');
  $service_channel_id = $node->field_ptv_id->value;
  $service_id = NULL;
  $latitude = NULL;
  $longitude = NULL;

  // Fetch service id from the first service reference.
  if ($node->field_services->entity) {
    $service_id = $node->field_services->entity->field_ptv_id->value;
  }

  // Fetch the PTV-coordinates.
  $field_ptv_coordinates = $node->hasField('field_ptv_coordinates') ? $node->field_ptv_coordinates->get(0) : NULL;
  if ($field_ptv_coordinates) {
    $latitude = $field_ptv_coordinates->first;
    $longitude = $field_ptv_coordinates->second;
  }

  // Create a map link if we have all the required parameters.
  if ($map_url && $service_channel_id && $service_id && $latitude && $longitude) {
    $variables['ptv_map_url'] = Url::fromUri(
      $map_url . $service_id,
      [
        'query' => [
          'lat' => $latitude,
          'lon' => $longitude,
          'zoom' => 9,
          'sl' => $service_channel_id,
        ],
      ]
    )->toString();
  }

  // Formulate opening hours.
  if ($node->hasField('field_opening_hours')) {
    $opening_hours_data = $node->field_opening_hours->getValue();

    if ($opening_hours_data) {
      $variables['opening_hours'] = _service_paths_theme_opening_hours($opening_hours_data);
    }
  }
}

/**
 * Custom twig templates for radio and checkbox input labels.
 */
function service_paths_theme_preprocess_form_element(&$variables) {
  if ($variables['element']['#type'] == 'radio') {
    $variables['label']['#theme'] = 'form_element_label__radio';
  }
  elseif ($variables['element']['#type'] == 'checkbox') {
    $variables['label']['#theme'] = 'form_element_label__checkbox';
  }
  elseif ($variables['element']['#type'] == 'select') {
    $variables['label']['#theme'] = 'form_element_label__select';
  }
}

/**
 * Implements hook_preprocess_select().
 */
function service_paths_theme_preprocess_select(&$variables) {
  if (isset($variables['attributes']['name'])) {
    $variables['attributes']['aria-label'] = 'select__' . $variables['attributes']['id'];
  }
}

/**
 * Implements hook_preprocess_field().
 */
function service_paths_theme_preprocess_field(&$variables, $hook) {
  $variables['base_path'] = \Drupal::request()->getHost();
}

/**
 * Implements hook_preprocess_field().
 */
function service_paths_theme_preprocess_field__field_opening_hours(&$variables) {
  // Format opening hours data into a twig friendly format.
  $opening_hours_data = [];
  if (isset($variables['element']['#items']) && $variables['element']['#items'] instanceof FieldItemList) {
    $opening_hours_data = $variables['element']['#items']->getValue();
  }
  if ($opening_hours_data) {
    $variables['opening_hours'] = _service_paths_theme_opening_hours($opening_hours_data);
  }
}

/**
 * Implements hook_preprocess_field().
 */
function service_paths_theme_preprocess_field__field_holiday_opening_hours(&$variables) {
  // Format holiday opening hours data into a twig friendly format.
  $holiday_opening_hours_data = [];
  if (isset($variables['element']['#items']) && $variables['element']['#items'] instanceof FieldItemList) {
    $holiday_opening_hours_data = $variables['element']['#items']->getValue();
  }
  if ($holiday_opening_hours_data) {
    $holiday_opening_hours = [];
    $holiday_opening_hour = [];

    foreach ($holiday_opening_hours_data as $data) {
      // Only the first item is populated; this is the date description.
      if ($data['first'] && empty($data['second'])) {
        // Save previous opening hour data.
        if ($holiday_opening_hour) {
          $holiday_opening_hours[] = $holiday_opening_hour;
        }
        // Create a new opening hour.
        $holiday_opening_hour = [
          'description' => $data['first'],
        ];
      }
      // Valid from date.
      elseif ($data['first'] === 'valid_from' && $data['second']) {
        $holiday_opening_hour['valid_from'] = $data['second'];
      }
      // Valid to date.
      elseif ($data['first'] === 'valid_to' && $data['second']) {
        $holiday_opening_hour['valid_to'] = $data['second'];
      }
      // Opening hour information.
      else {
        $holiday_opening_hour['opening_hours'] = $data['second'];
      }
    }
    // Save last opening hour.
    if ($holiday_opening_hour) {
      $holiday_opening_hours[] = $holiday_opening_hour;
    }

    // Order by valid_from date.
    // phpcs:ignore PHPCS_SecurityAudit.BadFunctions.CallbackFunctions.WarnCallbackFunctions
    usort($holiday_opening_hours, function ($a, $b) {
      $a_timestamp = isset($a['valid_from']) ? strtotime($a['valid_from']) : 0;
      $b_timestamp = isset($b['valid_from']) ? strtotime($b['valid_from']) : 0;

      if ($a_timestamp === $b_timestamp) {
        return 0;
      }

      return ($a_timestamp < $b_timestamp) ? -1 : 1;
    });

    $variables['holiday_opening_hours'] = $holiday_opening_hours;
  }
}

/**
 * Implements hook_preprocess_links__LINKS().
 *
 * Helper for adding language links in an easy to theme format.
 */
function service_paths_theme_preprocess_links__language_block(&$variables) {
  $current_language = \Drupal::languageManager()->getCurrentLanguage();
  $links = [];

  foreach ($variables['links'] as $langcode => $link) {
    $links[$langcode]['title'] = $link['text'];

    if (!empty($link['link'])) {
      $links[$langcode]['url'] = service_paths_theme_get_link_url($link['link']['#url'], $link['link']['#options']);
      $links[$langcode]['attributes']['lang'] = $langcode;

      if ($current_language->getId() === $langcode) {
        $links[$langcode]['modifiers'] = ['is-active'];
        $links[$langcode]['attributes']['aria-current'] = 'page';
      }
    }
  }

  $variables['language_links'] = $links;
  $variables['language_current'] = $current_language->getName();
}

/**
 * Implements hook_theme().
 */
function service_paths_theme_theme(array $existing, $type, $theme, $path) {
  return [
    'service_paths_theme_icon' => [
      'variables' => [
        'base_class' => NULL,
        'modifiers' => NULL,
        'blockname' => NULL,
        'extra_class' => NULL,
        'name' => NULL,
        'role' => NULL,
        'title' => NULL,
        'desc' => NULL,
        'decorative' => TRUE,
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function service_paths_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $suggestions = [];
  $element = $variables['element'];

  // $entity_type = $element['#entity_type'];
  $field_type = $element['#field_type'];
  $field_name = $element['#field_name'];
  $view_mode = $element['#view_mode'];
  $bundle = $element['#bundle'];

  $suggestions[] = 'field__' . $field_type;
  $suggestions[] = 'field__' . $field_name;
  $suggestions[] = 'field__' . $field_name . '__' . $view_mode;
  $suggestions[] = 'field__' . $field_name . '__' . $bundle;
  $suggestions[] = 'field__' . $field_name . '__' . $bundle . '__' . $view_mode;

  return $suggestions;
}

/**
 * Custom twig templates for reset input fields.
 */
function service_paths_theme_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (
    $element['#type'] === 'submit' &&
    isset($element['#parents'][0]) &&
    $element['#parents'][0] === 'reset'
  ) {
    $suggestions[] = 'input__reset';
  }
}

/**
 * Implements hook_theme_suggestions_responsive_image_formatter_alter().
 */
function service_paths_theme_theme_suggestions_responsive_image_formatter_alter(&$suggestions, $variables) {
  $suggestions[] = 'responsive_image_formatter__' . $variables['responsive_image_style_id'];
}

/**
 * Implements hook_theme_suggestions_paragraph_alter().
 */
function service_paths_theme_theme_suggestions_paragraph_alter(&$suggestions, $variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $view_mode = $variables['elements']['#view_mode'];
  $parent = $paragraph->getParentEntity();
  if ($parent) {
    $suggestions[] = 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle();
    $suggestions[] = 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle() . '__' . $view_mode;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function service_paths_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view__' . $variables['view']->id();
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function service_paths_theme_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->id();
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

/**
 * Get link url with set language.
 *
 * @param \Drupal\Core\Url $url
 *   The URL object used for the link.
 * @param array $options
 *   The URL options used for the link.
 *
 * @return string
 *   The URL for the link.
 */
function service_paths_theme_get_link_url(Url $url, array $options) {
  $url->setOptions($options);
  return $url->toString();
}

/**
 * Helper function to add service channels list related variables.
 *
 * @param array $variables
 *   Template variables. Passed by reference.
 * @param string $eva_pseudo_field_name
 *   The name of a pseudo field generated by an EVA view.
 */
function _service_paths_theme_service_channels(array &$variables, string $eva_pseudo_field_name) {
  $service_channels_view = $variables['content'][$eva_pseudo_field_name]['#view'] ?? NULL;
  if ($service_channels_view) {
    $service_channels_view->execute();
  }
  $variables['service_channels'] = $variables['content'][$eva_pseudo_field_name] ?? '';
  $variables['service_channels_total'] = $service_channels_view ? $service_channels_view->total_rows : 0;
}

/**
 * Helper function to format opening hours.
 *
 * @param array $opening_hours_data
 *   Opening hours field data.
 *
 * @return array
 *   Formatted opening hour data.
 */
function _service_paths_theme_opening_hours(array $opening_hours_data) {
  $opening_hours = [];
  $group_title = NULL;
  $group_days = [];

  foreach ($opening_hours_data as $opening_hour) {
    $first = $opening_hour['first'];
    $second = $opening_hour['second'];

    if ($first && is_null($second)) {
      // This is a group header. Close previous group, if found and create
      // a new one.
      _service_paths_theme_close_opening_hour_group($opening_hours, $group_title, $group_days);
      $group_title = $first;
    }
    elseif ($second && is_null($first)) {
      // This is a one line opening info, like 'Always open'.
      $group_days[] = [
        'weekday' => $second,
      ];
    }
    elseif ($first === 'valid_from' && $second) {
      // Include valid from date somewhere in opening hours (TBD).
    }
    elseif ($first === 'valid_to' && $second) {
      // Include valid to date somewhere in opening hours (TBD).
    }
    else {
      // A regular opening hour.
      $group_days[] = [
        'weekday' => $first,
        'hours' => $second,
      ];
    }
  }

  // Close the last group and add to twig variables.
  _service_paths_theme_close_opening_hour_group($opening_hours, $group_title, $group_days);

  return $opening_hours;
}

/**
 * Helper function to close an opening hour group.
 *
 * @param array $opening_hours
 *   Opening hours data. Passed by reference.
 * @param string $group_title
 *   Title for the group to be closed. Passed by reference.
 * @param array $group_days
 *   Days for the group to be closed. Passed by reference.
 */
function _service_paths_theme_close_opening_hour_group(array &$opening_hours, &$group_title, array &$group_days) {
  if ($group_title || $group_days) {
    $opening_hours[] = [
      'group_title' => $group_title,
      'days' => $group_days,
    ];
  }
  $group_title = NULL;
  $group_days = [];
}
