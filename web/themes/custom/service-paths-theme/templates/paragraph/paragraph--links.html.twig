{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set box_links__base_class = box_links__base_class|default('box-links') %}
{% set box_links__modifiers = box_links__modifiers|default([]) %}

<div {{ bem(box_links__base_class, box_links__modifiers) }}>
  {% if content.field_paragraph_heading|render %}
    {% include "@atoms/text/heading/heading.twig" with {
      "heading": content.field_paragraph_heading,
      "heading__level": box_links__title_level|default('3'),
      "heading__blockname": box_links__base_class,
    } %}
  {% endif %}

  <div {{ bem("links", [], box_links__base_class) }}>

    {% embed "@atoms/lists/list-unordered.twig" with {
      list__base_class: "box-links",
      list__modifiers:  box_links__modifiers,
      list__blockname:  box_links__base_class,
    } %}
      {% block list_content %}
        {{ content.field_link }}
      {% endblock %}
    {% endembed %}

    {% embed "@atoms/lists/list-unordered.twig" with {
      list__base_class: "attachment-links",
      list__modifiers:  box_links__modifiers,
      list__blockname:  box_links__base_class,
    } %}
      {% block list_content %}
        {{ content.field_media }}
      {% endblock %}
    {% endembed %}

  </div>

</div>


