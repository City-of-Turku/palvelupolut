<?php

/**
 * @file
 * Contains ptv.module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * PTV Cron.
 */
function _ptv_config_update_cron() {
  $ptv_service = \Drupal::service('ptv.api_service');
  $config = \Drupal::configFactory()->getEditable('ptv.settings');
  if ($config->get('municipality')) {
    $services = [];
    $service_channels = [];
    foreach (array_filter($config->get('organizations')) as $key => $organization) {
      $services += $ptv_service->getServicesByOrganization($organization);
      $service_channels += $ptv_service->getServiceChannelsByOrganization($organization);
    }
    $config->set('services', $services);
    $config->set('service_channels', $service_channels);
    $config->save();
  }
}

/**
 * Alter node forms.
 */
function ptv_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  // Service.
  if ($node->bundle() == 'service') {
    $ptv_fields = [
      'field_charge_info',
      'field_description',
      'field_ptv_id',
      'field_requirements',
      'field_service_classes',
      'field_tags',
      'field_target_groups',
      'field_user_instruction',
    ];
    if (!$node->field_ptv_id->isEmpty()) {
      foreach ($ptv_fields as $field) {
        $form[$field]['widget']['#disabled'] = TRUE;
      }
      $ptv_description = t('To edit fields in this group, visit
        <a href="https://palvelutietovaranto.suomi.fi" target="_blank">
        https://palvelutietovaranto.suomi.fi</a>');
      $form['#fieldgroups']['group_ptv']->format_settings['description'] = '<p><strong>' . $ptv_description . '</strong></p>';
    }
  }
  // Service Channel.
  if ($node->bundle() == 'service_channel') {
    $ptv_fields = [
      'field_accessibility',
      'field_address',
      'field_description',
      'field_email',
      'field_languages',
      'field_opening_hours',
      'field_phone_numbers',
      'field_ptv_id',
      'field_service_channel_type',
      'field_tags',
      'field_webpage',
    ];
    if (!$node->field_ptv_id->isEmpty()) {
      foreach ($ptv_fields as $field) {
        $form[$field]['widget']['#disabled'] = TRUE;
      }
      $ptv_description = t('To edit fields in this group, visit
        <a href="https://palvelutietovaranto.suomi.fi" target="_blank">
        https://palvelutietovaranto.suomi.fi</a>');
      $form['#fieldgroups']['group_ptv']->format_settings['description'] = '<p><strong>' . $ptv_description . '</strong></p>';
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function ptv_preprocess_field(array &$vars) {
  ptv_preprocess_text_fields($vars);
}

/**
 * Parse text fields of service & service channel as markdown convert plain text html.
 */
function ptv_preprocess_text_fields(array &$vars) {
  if ($vars['element']['#entity_type'] != 'node') {
    return;
  }

  $bundle = $vars['element']['#bundle'];
  $node = $vars['element']['#object'];
  if (in_array($vars['element']['#bundle'], ['service', 'service_channel'])
      && !$node->field_ptv_id->isEmpty()) {

    switch ($bundle) {
      case 'service':
          $md_fields = [
            'field_description',
            'field_requirements',
            'field_user_instruction',
            'field_charge_info',
          ];
        break;

      case 'service_channel':
          $md_fields = [
            'field_description',
            'field_accessibility',
          ];
        break;
    }

    if (!class_exists('Parsedown')) {
      return;
    }

    $pd = new Parsedown();

    foreach ($md_fields as $field) {
      if ($vars['field_name'] !== $field) {
        continue;
      }

      foreach ($vars['items'] as $k => $item) {
        if (isset($item['content'], $item['content']['#text'])) {
          $vars['items'][$k]['content'] = [
            '#type' => 'processed_text',
            '#text' => $pd->text($item['content']['#text']),
            '#format' => 'basic_html',
          ];
        }
      }
    }
  }
}
